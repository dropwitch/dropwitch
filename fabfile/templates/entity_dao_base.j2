package {{ env.java_package_entity_dao_base }};

import {{ env.java_package_entity }}.{{ table.class_name }};
import io.dropwizard.hibernate.AbstractDAO;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.joda.time.DateTime;

import java.util.List;

public abstract class {{ table.class_name }}BaseDao extends AbstractDAO<{{ table.class_name }}> {
    public {{ table.class_name }}BaseDao(SessionFactory factory) {
        super(factory);
    }

    public {{ table.class_name }} create({% for column in table.no_default_columns %}{{ column.field_type }} {{ column.field_name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
        {{ table.class_name }} {{ table.camel_name }} = {{ table.class_name }}
                .builder()
                {% for column in table.columns %}
                {% if column.name != "id" and column.name != "created_at" and column.name != "updated_at" %}
                {% if column.default == "" %}
                .{{ column.field_name }}({{ column.field_name }})
                {% elif column.field_type == "boolean" %}
                .{{ column.field_name }}(false)
                {% elif column.field_type == "String" %}
                .{{ column.field_name }}("{{ column.default }}")
                {% else %}
                .{{ column.field_name }}({{ column.default }})
                {% endif %}
                {% endif %}
                {% endfor %}
                .build();
        currentSession().save({{ table.camel_name }});
        return {{ table.camel_name }};
    }

    public void update({{ table.class_name }} {{ table.camel_name }}) {
        currentSession().update({{ table.camel_name }});
    }

    public void updateByHql(String hql) {
        currentSession().createQuery(hql).executeUpdate();
    }

    public void delete({{ table.class_name }} {{ table.camel_name }}) {
        currentSession().delete({{ table.camel_name }});
    }

    @SuppressWarnings("unchecked")
    public List<{{ table.class_name }}> findAll() {
        return criteria().list();
    }
    {% for column in table.columns %}

    @SuppressWarnings("unchecked")
    public List<{{ table.class_name }}> findBy{{ column.pascal_name }}({{ column.field_type }} {{ column.field_name }}) {
        return criteria()
                .add(Restrictions.eq("{{ column.field_name }}", {{ column.field_name }}))
                .list();
    }
    {% endfor %}
}

